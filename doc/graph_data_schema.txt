# 图模型数据 Schema (Graph Data Schema)

本文档详细描述了项目中使用的图（Graph）的数据结构，包括节点（Node）和边（Edge）的属性。
该图数据主要用于股权关系分析和潜在风险环路检测。

## 1. 数据来源

主要的原始数据文件位于 `data/` 目录下：

*   `三层股权穿透输出数据_1.csv`: 包含公司的基本信息、层级关系 (`level`)、父公司信息 (`parent_id`)，以及一个嵌套的 `children` 字段（JSON格式字符串），详细描述了其直接持股的公司和个人股东信息（包括持股比例 `percent` 和金额 `amount`）。
*   `交易数据.csv`: 包含成员单位与其交易对象（客户/供应商）之间的交易记录，包括交易类型、交易金额、年份和月份。

图的构建主要由 `code/graph_builder.py`（处理股权结构）和 `code/add_transaction.py`（整合交易数据）完成。

## 2. 图的类型

*   系统内部使用 `networkx.MultiDiGraph` 进行图的构建和初步处理。这意味着在任意两个节点之间可以存在多条有向边，允许表示例如多次交易或不同类型的关系。
*   最终用于环路检测的图 (`model/simplified_loop_detection_graph.graphml`) 是一个 `networkx.DiGraph`，其中平行边被合并或简化。
*   图数据以 GraphML 格式存储，例如 `model/shareholder_graph.graphml` (股权图) 和 `model/final_heterogeneous_graph.graphml` (股权+交易混合图)。

## 3. 节点 (Node) Schema

节点代表参与股权关系或交易活动的实体，主要是公司，也可能包括个人。

*   **`Node ID` (节点标识符)**:
    *   **来源**: 通常是原始数据中的 `eid` (Entity ID) 字段。如果 `eid` 不可用或为空，则使用实体的 `name` (名称) 作为ID。
    *   **作用**: 在图中唯一标识一个节点。
    *   **数据类型**: String

*   **`name`**:
    *   **描述**: 节点所代表实体（公司或个人）的完整名称。
    *   **来源**: CSV文件中的 `name` 列或 `children` JSON结构中的 `name` 字段。
    *   **数据类型**: String
    *   **示例**: "A科技有限公司", "张三"

*   **`short_name`**:
    *   **描述**: 实体（通常是公司）的简称。
    *   **来源**: CSV文件中的 `short_name` 列或 `children` JSON结构中的 `short_name` 字段。
    *   **数据类型**: String
    *   **示例**: "A科技"

*   **`type`**:
    *   **描述**: 实体的类型。
    *   **来源**: CSV文件中的 `type` 列或 `children` JSON结构中的 `type` 字段。对于交易数据中新引入的节点，如果类型未知，可能会默认为 "企业"。
    *   **数据类型**: String
    *   **示例**: "有限责任公司", "股份有限公司", "个人", "企业"

*   **`level`**:
    *   **描述**: 公司在股权结构中的穿透层级。'0' 通常表示分析的起点或核心公司。
    *   **来源**: CSV文件中的 `level` 列。
    *   **数据类型**: String (通常是数字的字符串表示)
    *   **示例**: "0", "1", "2"

*   **`label`**:
    *   **描述**: 节点的角色或分类标签，用于辅助分析和可视化。
    *   **赋值逻辑**:
        *   **"股东"**: 通常赋予那些在 `children` 字段中出现但非Level 0核心公司的节点，或通过 `parent_id` 间接引入的非核心节点。
        *   **"成员单位"**: 来源于 `交易数据.csv` 中的 `成员单位` 列，标识交易的核心方。
        *   **"partner"**: 来源于 `交易数据.csv` 中的 `交易对象` 列，标识成员单位的客户或供应商。
        *   **"公司" / "个人" / "其他"**: 在环路检测脚本 (`loop_detection_nx.py`) 中，如果 `label` 属性缺失，会尝试根据 `type` 属性推断。
        *   可能为空字符串或 "数据缺失" 如果无法确定。
    *   **数据类型**: String
    *   **示例**: "股东", "成员单位", "partner", "公司"

## 4. 边 (Edge) Schema

边代表节点之间的关系，主要是股权投资关系和交易关系。

### 4.1 股权关系边 (Investment Edges)

*   **方向性**:
    *   从 `children` 字段解析: `股东` (源节点) -> `被投资公司` (目标节点)。
    *   从 `parent_id` 字段解析: `子公司/被控股方` (源节点) -> `母公司/控股方` (目标节点)。
    *   **注意**: 脚本中这两种来源的边都赋予了 `'控股'` 标签。在具体分析时需注意边的方向代表的实际业务含义。环路检测脚本期望的控股关系是：股东 -> 被投资公司。

*   **通用属性**:
    *   **`label`**:
        *   **描述**: 边的类型标签。
        *   **值**: 对于股权关系，通常是 `"控股"`。
        *   **数据类型**: String
    *   **`amount`**:
        *   **描述**: 投资金额。
        *   **来源**: `children` 字段中的 `amount` 或主CSV行中的 `amount`。
        *   **数据类型**: String (可能包含数字的字符串) 或 Float (在处理过程中可能转换为数值)
    *   **`percent`**:
        *   **描述**: 持股比例。
        *   **来源**: `children` 字段中的 `percent` 或主CSV行中的 `percent`。
        *   **处理**: 脚本会尝试将原始百分比（如 "50%" 或 50）规范化为0.0到1.0之间的小数。
        *   **数据类型**: Float (规范化后) 或 String (原始值)
    *   **`sh_type`**:
        *   **描述**: 股东类型（例如，说明是法人股东还是自然人股东）。
        *   **来源**: `children` 字段中的 `sh_type`。
        *   **数据类型**: String
    *   **`source_info`**:
        *   **描述**: 表明这条股权关系数据来源于原始数据的哪个部分。
        *   **值**: `'children_field'` 或 `'parent_id_field'`。
        *   **数据类型**: String

### 4.2 交易关系边 (Transaction Edges)

*   **方向性**:
    *   **销售**: `成员单位` (源节点) -> `交易对象(客户)` (目标节点)。
    *   **采购**: `交易对象(供应商)` (源节点) -> `成员单位` (目标节点)。

*   **通用属性**:
    *   **`label`**:
        *   **描述**: 边的类型标签。
        *   **值**: 固定为 `"交易"`。
        *   **数据类型**: String
    *   **`nature`**:
        *   **描述**: 交易的性质，指明交易对象是客户还是供应商。
        *   **值**: `"customer"` 或 `"supplier"`。
        *   **数据类型**: String
    *   **`year`**:
        *   **描述**: 交易发生的年份。
        *   **来源**: `交易数据.csv` 的 `年份` 列。
        *   **数据类型**: String
    *   **`month`**:
        *   **描述**: 交易发生的月份。
        *   **来源**: `交易数据.csv` 的 `月份` 列。
        *   **数据类型**: String
    *   **`amount`**:
        *   **描述**: 交易金额。
        *   **来源**: `交易数据.csv` 的 `交易金额` 列。
        *   **数据类型**: Float (如果可以转换) 或 String (空字符串表示缺失或无法转换)

## 5. GraphML 文件存储

*   在将图保存为 GraphML 文件 (例如 `model/shareholder_graph.graphml`, `model/final_heterogeneous_graph.graphml`) 之前，节点和边的属性值若为 `None`，会被转换为空字符串 (`""`)。

## 6. 预期用途

此图模型数据结构旨在支持以下分析：

*   股权穿透分析，识别最终受益人或控制方。
*   检测复杂的股权闭环、循环持股等模式。
*   结合交易数据，分析资金流向，识别潜在的关联交易风险。
*   为风险评估模型提供结构化的输入数据。

---
*本文档最后更新时间: YYYY-MM-DD* (请手动更新此日期) 